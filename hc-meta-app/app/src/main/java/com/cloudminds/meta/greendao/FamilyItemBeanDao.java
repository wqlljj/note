package com.cloudminds.meta.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.cloudminds.meta.bean.FamilyItemBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FAMILY_ITEM_BEAN".
*/
public class FamilyItemBeanDao extends AbstractDao<FamilyItemBean, String> {

    public static final String TABLENAME = "FAMILY_ITEM_BEAN";

    /**
     * Properties of entity FamilyItemBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Face_id = new Property(0, String.class, "face_id", true, "FACE_ID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property ImageLocalPath = new Property(2, String.class, "imageLocalPath", false, "IMAGE_LOCAL_PATH");
        public final static Property Remark = new Property(3, String.class, "remark", false, "REMARK");
        public final static Property ImageNetPath = new Property(4, String.class, "imageNetPath", false, "IMAGE_NET_PATH");
    }


    public FamilyItemBeanDao(DaoConfig config) {
        super(config);
    }
    
    public FamilyItemBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FAMILY_ITEM_BEAN\" (" + //
                "\"FACE_ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: face_id
                "\"NAME\" TEXT," + // 1: name
                "\"IMAGE_LOCAL_PATH\" TEXT," + // 2: imageLocalPath
                "\"REMARK\" TEXT," + // 3: remark
                "\"IMAGE_NET_PATH\" TEXT);"); // 4: imageNetPath
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FAMILY_ITEM_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FamilyItemBean entity) {
        stmt.clearBindings();
 
        String face_id = entity.getFace_id();
        if (face_id != null) {
            stmt.bindString(1, face_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String imageLocalPath = entity.getImageLocalPath();
        if (imageLocalPath != null) {
            stmt.bindString(3, imageLocalPath);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(4, remark);
        }
 
        String imageNetPath = entity.getImageNetPath();
        if (imageNetPath != null) {
            stmt.bindString(5, imageNetPath);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FamilyItemBean entity) {
        stmt.clearBindings();
 
        String face_id = entity.getFace_id();
        if (face_id != null) {
            stmt.bindString(1, face_id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String imageLocalPath = entity.getImageLocalPath();
        if (imageLocalPath != null) {
            stmt.bindString(3, imageLocalPath);
        }
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(4, remark);
        }
 
        String imageNetPath = entity.getImageNetPath();
        if (imageNetPath != null) {
            stmt.bindString(5, imageNetPath);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public FamilyItemBean readEntity(Cursor cursor, int offset) {
        FamilyItemBean entity = new FamilyItemBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // face_id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // imageLocalPath
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // remark
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // imageNetPath
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FamilyItemBean entity, int offset) {
        entity.setFace_id(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setImageLocalPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setRemark(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setImageNetPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final String updateKeyAfterInsert(FamilyItemBean entity, long rowId) {
        return entity.getFace_id();
    }
    
    @Override
    public String getKey(FamilyItemBean entity) {
        if(entity != null) {
            return entity.getFace_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FamilyItemBean entity) {
        return entity.getFace_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
